ggsave("quinary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(quinary_plot_g), dpi=1000)
binary_inference <- reformat(fromJSON("../analysis/inference_results/binary.json"), "binary")
ternary_inference <- reformat(fromJSON("../analysis/inference_results/tertiary.json"), "ternary")
quaternary_inference <- reformat(fromJSON("../analysis/inference_results/quaternary.json"), "quaternary")
quinary_inference <- reformat(fromJSON("../analysis/inference_results/quinary.json"), "quinary")
View(quinary_inference)
sink('summary.txt')
print("Binary MaxAP values: ")
print(binary_inference$maxap)
print("Binary Predictives Adj. R^2: ")
print(binary_inference$arsq)
print("Ternary MaxAP values: ")
print(ternary_inference$maxap)
print("Ternary Predictives Adj. R^2: ")
print(ternary_inference$arsq)
print("Quaternary MaxAP values: ")
print(quaternary_inference$maxap)
print("Quaternary Predictives Adj. R^2: ")
print(quaternary_inference$arsq)
print("Quinary MaxAP values: ")
print(quinary_inference$maxap)
print("Quinary Predictives Adj. R^2: ")
print(quinary_inference$arsq)
sink()
sink('summary.txt')
print("Binary MaxAP values: ")
print(binary_inference$maxap)
print("Binary Predictives Adj. R^2: ")
print(binary_inference$arsq)
print("Ternary MaxAP values: ")
print(ternary_inference$maxap)
print("Ternary Predictives Adj. R^2: ")
print(ternary_inference$arsq)
print("Quaternary MaxAP values: ")
print(quaternary_inference$maxap)
print("Quaternary Predictives Adj. R^2: ")
print(quaternary_inference$arsq)
print("Quinary MaxAP values: ")
print(quinary_inference$maxap)
print("Quinary Predictives Adj. R^2: ")
print(quinary_inference$arsq)
sink()
View(quinary_inference)
binary_inference <- reformat(fromJSON("../analysis/inference_results/binary.json"), "binary")
ternary_inference <- reformat(fromJSON("../analysis/inference_results/tertiary.json"), "ternary")
quaternary_inference <- reformat(fromJSON("../analysis/inference_results/quaternary.json"), "quaternary")
quinary_inference <- reformat(fromJSON("../analysis/inference_results/quinary.json"), "quinary")
sink('summary.txt')
print("Binary MaxAP values: ")
print(binary_inference$maxap)
print("Binary Predictives Adj. R^2: ")
print(binary_inference$arsq)
print("Ternary MaxAP values: ")
print(ternary_inference$maxap)
print("Ternary Predictives Adj. R^2: ")
print(ternary_inference$arsq)
print("Quaternary MaxAP values: ")
print(quaternary_inference$maxap)
print("Quaternary Predictives Adj. R^2: ")
print(quaternary_inference$arsq)
print("Quinary MaxAP values: ")
print(quinary_inference$maxap)
print("Quinary Predictives Adj. R^2: ")
print(quinary_inference$arsq)
sink()
View(quinary_inference)
View(quinary_inference)
sink('summary.txt')
print("Binary MaxAP values: ")
print(binary_inference$maxap)
print("Binary Predictives Adj. R^2: ")
print(binary_inference$arsq)
print("Ternary MaxAP values: ")
print(ternary_inference$maxap)
print("Ternary Predictives Adj. R^2: ")
print(ternary_inference$arsq)
print("Quaternary MaxAP values: ")
print(quaternary_inference$maxap)
print("Quaternary Predictives Adj. R^2: ")
print(quaternary_inference$arsq)
print("Quinary MaxAP values: ")
print(quinary_inference$maxap)
print("Quinary Predictives Adj. R^2: ")
print(quinary_inference$arsq)
sink()
quinary_plot<-
quinary_summary_m %>%
ggplot(aes(x=response, y=proportion, fill=condition, alpha=source)) +
geom_bar(stat = "identity", position="dodge",width=0.6,color="gray60") +
ggtitle(expression(paste("Quinary condition (Adj. ", R^2, "= 0.895)"))) +
facet_grid(card_type~guess_type) +
scale_y_continuous(breaks=NULL) +
labs(x=NULL, y=NULL)+
theme_few() +
theme(text = element_text(size=12)) +
# scale_fill_manual(values = c("blue4"), guide=FALSE) +
geom_linerange(aes(ymin=lwr.ci,ymax=upr.ci),position=position_dodge(width = 0.6)) +
guides(fill=FALSE) +
scale_alpha_discrete(name = "Source", labels = c("Prediction", "Observation"), range = c(0.3, 1)) +
theme(legend.position = "none") + theme(axis.text.x = element_text(angle=90, hjust = 1),
axis.text.y = element_blank())
quinary_plot_g <- ggplot_gtable(ggplot_build(quinary_plot))
strips <- grep("strip-r", quinary_plot_g$layout$name)
new_grobs <- list(cat, cat_dog)
quinary_plot_g <- with(quinary_plot_g$layout[strips,],
gtable_add_grob(quinary_plot_g, new_grobs,
t=t, l=l, b=b, r=r, name="cards"))
quinary_plot_g$widths[[12]] <- unit(2.5,"cm")
grid.draw(quinary_plot_g)
ggsave("ternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(ternary_plot_g), dpi=1000)
ggsave("binary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(binary_plot_g), dpi=1000)
ggsave("quaternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(quaternary_plot_g), dpi=1000)
ggsave("quinary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(quinary_plot_g), dpi=1000)
library(jsonlite)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../experiment_results.csv")
d$response_type <- recode(d$response_type, quatenary = "quaternary", tertiary = "ternary")
results <- d %>%
group_by(card_type, guess_type, response_type) %>%
summarize(nright = sum(response == "Right"),
nkindaright = sum(response == "Kinda Right"),
nneither = sum(response == "Neither"),
nkindawrong = sum(response == "Kinda Wrong"),
nwrong = sum(response == "Wrong"),
total = n(),
observed_right = nright / total,
observed_neither = nneither/total,
observed_kindaright = nkindaright/total,
observed_kindawrong = nkindawrong/total,
observed_wrong = nwrong/total
)
reformat <- function(d, condition) {
d$condition <- condition
d$merged <- merge(results %>% filter(response_type == d$condition), d$predictions, by = c("card_type","guess_type"))
d$reformat <- d$merged %>%
gather(observation_type, observation, observed_right:observed_wrong)  %>%
gather(prediction_type, prediction, predicted_right:predicted_wrong)  %>%
separate(observation_type, c("remove1","response_type"), sep = "_", remove = TRUE) %>%
separate(prediction_type, c("remove2","prediction_type"), sep = "_", remove = TRUE) %>%
select(-(c("remove1","remove2"))) %>%
filter(response_type == prediction_type) %>%
unite(card_guess, c("card_type","guess_type"))
fit1 <- lm(observation ~ prediction, data = d$reformat)
d$rsq <- summary(fit1)$r.squared
d$arsq <- summary(fit1)$adj.r.squared
return(d)
}
binary_inference <- reformat(fromJSON("../analysis/inference_results/binary.json"), "binary")
ternary_inference <- reformat(fromJSON("../analysis/inference_results/tertiary.json"), "ternary")
quaternary_inference <- reformat(fromJSON("../analysis/inference_results/quaternary.json"), "quaternary")
quinary_inference <- reformat(fromJSON("../analysis/inference_results/quinary.json"), "quinary")
sink('summary.txt')
print("Binary MaxAP values: ")
print(binary_inference$maxap)
print("Binary Predictives Adj. R^2: ")
print(binary_inference$arsq)
print("Ternary MaxAP values: ")
print(ternary_inference$maxap)
print("Ternary Predictives Adj. R^2: ")
print(ternary_inference$arsq)
print("Quaternary MaxAP values: ")
print(quaternary_inference$maxap)
print("Quaternary Predictives Adj. R^2: ")
print(quaternary_inference$arsq)
print("Quinary MaxAP values: ")
print(quinary_inference$maxap)
print("Quinary Predictives Adj. R^2: ")
print(quinary_inference$arsq)
sink()
rm(list = ls())
library(jsonlite)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
binary_inference <- fromJSON("../analysis/inference_results/binary.json")
ternary_inference <- fromJSON("../analysis/inference_results/tertiary.json")
quaternary_inference <- fromJSON("../analysis/inference_results/quaternary.json")
quinary_inference <- fromJSON("../analysis/inference_results/quinary.json")
graph_posteriors <- function(pos,title,suppress_pt = FALSE) {
df <- bind_rows(pos) %>% mutate(alpha = alpha/10) %>% gather()
if(suppress_pt == TRUE) {
df <- df %>% filter(!(key %in% c("pt_prob")))
}
df$key <- as.character(df$key)
df$key <- recode(df$key, mu_theta1 = "mu[theta[1]]",
mu_theta2 = "mu[theta[2]]",
mu_theta3 = "mu[theta[3]]",
mu_theta4 = "mu[theta[4]]",
pt_prob = "PT",
sigma = "sigma",
alpha = "alpha/10")
ggplot(df) +
aes(y=2*(..density..)/sum(..density..), x=value) +
geom_density() +
facet_grid(key~.,scales = "free",labeller = label_parsed) +
theme(axis.ticks.y =element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'gray'),
legend.position = "none") +
labs(x = "", y = "") +
ggtitle(title)
}
graph_posteriors(quaternary_inference$posteriors$support,"Quaternary condition")
graph_posteriors(binary_inference$posteriors$support, "Binary condition", suppress_pt = TRUE)
ggsave("binary_posteriors.jpeg",width = 4, height = 2.1, units = "in")
rm(list = ls())
library(jsonlite)
library(tidyverse)
library(bootstrap)
library(stats4)
library(DescTools)
library(ggthemes)
library(jpeg)
library(grid)
library(gtable)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
cat <-
readJPEG("cat_card.jpg") %>%
rasterGrob(width=0.9)
cat_dog <-
readJPEG("catdog_card.jpg")%>%
rasterGrob(width=0.9)
d <- read_csv("../experiment_results.csv")
d$response_type <- recode(d$response_type, quatenary = "quaternary", tertiary = "ternary")
results <- d %>%
group_by(card_type, guess_type, response_type) %>%
summarize(nright = sum(response == "Right"),
nkindaright = sum(response == "Kinda Right"),
nneither = sum(response == "Neither"),
nkindawrong = sum(response == "Kinda Wrong"),
nwrong = sum(response == "Wrong"),
total = n(),
observed_right = nright / total,
observed_neither = nneither/total,
observed_kindaright = nkindaright/total,
observed_kindawrong = nkindawrong/total,
observed_wrong = nwrong/total
)
reformat <- function(d, condition) {
d$condition <- condition
d$merged <- merge(results %>% filter(response_type == d$condition), d$predictions, by = c("card_type","guess_type"))
d$reformat <- d$merged %>%
gather(observation_type, observation, observed_right:observed_wrong)  %>%
gather(prediction_type, prediction, predicted_right:predicted_wrong)  %>%
separate(observation_type, c("remove1","response_type"), sep = "_", remove = TRUE) %>%
separate(prediction_type, c("remove2","prediction_type"), sep = "_", remove = TRUE) %>%
select(-(c("remove1","remove2"))) %>%
filter(response_type == prediction_type) %>%
unite(card_guess, c("card_type","guess_type"))
fit1 <- lm(observation ~ prediction, data = d$reformat)
d$rsq <- summary(fit1)$r.squared
d$arsq <- summary(fit1)$adj.r.squared
return(d)
}
binary_inference <- reformat(fromJSON("../analysis/inference_results/binary.json"), "binary")
ternary_inference <- reformat(fromJSON("../analysis/inference_results/tertiary.json"), "ternary")
quaternary_inference <- reformat(fromJSON("../analysis/inference_results/quaternary.json"), "quaternary")
quinary_inference <- reformat(fromJSON("../analysis/inference_results/quinary.json"), "quaternary")
binary_summary<-
d %>%
filter(response_type=="binary") %>%
group_by(card_type, guess_type, response) %>%
summarize(count=n()) %>%
group_by(card_type, guess_type) %>%
mutate(total = sum(count), est=count/total)
binary_summary_X_cat <-
binary_summary %>%
filter(card_type=="X", guess_type=="X")
binary_summary_X_cat_confint <-
binary_summary_X_cat$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_X_cat <- binary_summary_X_cat %>% full_join(binary_summary_X_cat_confint, by="est")
binary_summary_XY_cat <-
binary_summary %>%
filter(card_type=="XY", guess_type=="X")
binary_summary_XY_cat_confint <-
binary_summary_XY_cat$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_XY_cat <- binary_summary_XY_cat %>% full_join(binary_summary_XY_cat_confint, by="est")
binary_summary_XY_ele <-
binary_summary %>%
filter(card_type=="XY", guess_type=="Z")
binary_summary_XY_ele_confint <-
binary_summary_XY_ele$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_XY_ele <- binary_summary_XY_ele %>% full_join(binary_summary_XY_ele_confint, by="est") %>% unique()
binary_summary_X_ele <-
binary_summary %>%
filter(card_type=="X", guess_type=="Z")
binary_summary_X_ele_confint <-
binary_summary_X_ele$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_X_ele <- binary_summary_X_ele %>% full_join(binary_summary_X_ele_confint, by="est") %>% unique()
binary_summary_XY_and <-
binary_summary %>%
filter(card_type=="XY", guess_type=="XandY")
binary_summary_XY_and_confint <-
binary_summary_XY_and$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_XY_and <- binary_summary_XY_and %>% full_join(binary_summary_XY_and_confint, by="est") %>% unique()
binary_summary_X_and <-
binary_summary %>%
filter(card_type=="X", guess_type=="XandY")
binary_summary_X_and_confint <-
binary_summary_X_and$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_X_and <- binary_summary_X_and %>% full_join(binary_summary_X_and_confint, by="est") %>% unique()
binary_summary_XY_or <-
binary_summary %>%
filter(card_type=="XY", guess_type=="XorY")
binary_summary_XY_or_confint <-
binary_summary_XY_or$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_XY_or <- binary_summary_XY_or %>% full_join(binary_summary_XY_or_confint, by="est") %>% unique()
binary_summary_X_or <-
binary_summary %>%
filter(card_type=="X", guess_type=="XorY")
binary_summary_X_or_confint <-
binary_summary_X_or$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
binary_summary_X_or <- binary_summary_X_or %>% full_join(binary_summary_X_or_confint, by="est") %>% unique()
binary_summary <- bind_rows(binary_summary_X_cat, binary_summary_XY_cat, binary_summary_XY_ele, binary_summary_X_ele, binary_summary_XY_and, binary_summary_X_and, binary_summary_XY_or, binary_summary_X_or)
binary_summary$response <- factor(binary_summary$response, levels = c("Wrong","Right"))
binary_summary$guess_type <- factor(binary_summary$guess_type, levels = c("Z","X","XandY","XorY"))
binary_summary <- binary_summary %>% rename(proportion = "est")
binary_predictions <- binary_inference$reformat %>%
select(card_guess,prediction_type,prediction) %>%
separate(card_guess, c("card_type","guess_type"), sep = "_")
binary_predictions$prediction_type <- recode(binary_predictions$prediction_type, right = "Right", wrong = "Wrong")
colnames(binary_predictions)[colnames(binary_predictions)=="prediction_type"] <- "response"
binary_summary_m= merge(binary_summary, binary_predictions, by = c("card_type","guess_type","response")) %>%
gather("source", "proportion", c("proportion","prediction"))
binary_summary_m$lwr.ci[binary_summary_m$source == 'prediction'] <- NA
binary_summary_m$upr.ci[binary_summary_m$source == 'prediction'] <- NA
binary_summary_m$guess_type <- recode(binary_summary_m$guess_type, Z = "elephant", X = "cat", XandY = "cat and dog", XorY ="cat or dog")
binary_summary_m = binary_summary_m %>%
mutate(condition = case_when(
card_type == "XY" & guess_type %in% c("cat", "cat or dog") ~ "underinformative",
card_type == "X" & guess_type %in% c("cat", "cat or dog") ~ "true",
card_type == "XY" & guess_type == "cat and dog" ~ "true",
TRUE ~ "false"
))
binary_plot<-
binary_summary_m %>%
ggplot(aes(x=response, y=proportion, fill=condition, alpha=source)) +
geom_bar(stat = "identity", position="dodge",width=0.6,color="gray60") +
ggtitle(expression(paste("Binary condition (Adj. ", R^2, "= 0.976)"))) +
facet_grid(card_type~guess_type) +
labs(x=NULL, y="Proportion of response")+
theme_few() +
theme(text = element_text(size=12)) +
geom_linerange(aes(ymin=lwr.ci,ymax=upr.ci),position=position_dodge(width = 0.6)) +
guides(fill=FALSE) +
scale_alpha_discrete(name = "Source", labels = c("Prediction", "Observation"), range = c(0.3, 1)) +
theme(legend.position = "null") + theme(axis.text.x = element_text(angle=90, hjust = 1))
binary_plot<-
binary_summary_m %>%
ggplot(aes(x=response, y=proportion, fill=condition, alpha=source)) +
geom_bar(stat = "identity", position="dodge",width=0.6,color="gray60") +
ggtitle(expression(paste("Binary condition (Adj. ", R^2, "= 0.968)"))) +
facet_grid(card_type~guess_type) +
labs(x=NULL, y="Proportion of response")+
theme_few() +
theme(text = element_text(size=12)) +
geom_linerange(aes(ymin=lwr.ci,ymax=upr.ci),position=position_dodge(width = 0.6)) +
guides(fill=FALSE) +
scale_alpha_discrete(name = "Source", labels = c("Prediction", "Observation"), range = c(0.3, 1)) +
theme(legend.position = "null") + theme(axis.text.x = element_text(angle=90, hjust = 1))
binary_plot_g <- ggplot_gtable(ggplot_build(binary_plot))
strips <- grep("strip-r", binary_plot_g$layout$name)
new_grobs <- list(cat, cat_dog)
binary_plot_g <- with(binary_plot_g$layout[strips,],
gtable_add_grob(binary_plot_g, new_grobs,
t=t, l=l, b=b, r=r, name="cards"))
binary_plot_g$widths[[12]] <- unit(2.5,"cm")
grid.draw(binary_plot_g)
ggsave("binary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(binary_plot_g), dpi=1000)
ggsave("ternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(ternary_plot_g), dpi=1000)
ggsave("binary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(binary_plot_g), dpi=1000)
ggsave("quaternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(quaternary_plot_g), dpi=1000)
ggsave("quinary_plot.png",width = 5.85, height = 4.19, units = "in", plot = grid.draw(quinary_plot_g), dpi=1000)
ggsave("quaternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(quaternary_plot_g), dpi=1000)
quaternary_plot<-
quaternary_summary_m %>%
ggplot(aes(x=response, y=proportion, fill=condition, alpha=source)) +
geom_bar(stat = "identity", position="dodge",width=0.6,color="gray60") +
facet_grid(card_type~guess_type) +
labs(x=NULL, y="Proportion of response")+
ggtitle(expression(paste("Quaternary condition (Adj. ", R^2, "= 0.931)"))) +
theme_few() +
theme(text = element_text(size=12)) +
# scale_fill_manual(values = c("blue4"), guide=FALSE) +
geom_linerange(aes(ymin=lwr.ci,ymax=upr.ci),position=position_dodge(width = 0.6)) +
guides(fill=FALSE) +
scale_alpha_discrete(name = "Source", labels = c("Prediction", "Observation"), range = c(0.3, 1)) +
theme(legend.position = "null") + theme(axis.text.x = element_text(angle=90, hjust = 1),
strip.text.y = element_blank())
quaternary_summary<-
d %>%
filter(response_type=="quaternary") %>%
group_by(card_type, guess_type, response) %>%
summarize(count=n()) %>%
group_by(card_type, guess_type) %>%
mutate(total = sum(count), est=count/total)
quaternary_summary_X_cat <-
quaternary_summary %>%
filter(card_type=="X", guess_type=="X")
quaternary_summary_X_cat_confint <-
quaternary_summary_X_cat$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_X_cat <- quaternary_summary_X_cat %>% full_join(quaternary_summary_X_cat_confint, by="est")
quaternary_summary_XY_cat <-
quaternary_summary %>%
filter(card_type=="XY", guess_type=="X")
quaternary_summary_XY_cat_confint <-
quaternary_summary_XY_cat$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_XY_cat <- quaternary_summary_XY_cat %>% full_join(quaternary_summary_XY_cat_confint, by="est")
quaternary_summary_XY_ele <-
quaternary_summary %>%
filter(card_type=="XY", guess_type=="Z")
quaternary_summary_XY_ele_confint <-
quaternary_summary_XY_ele$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_XY_ele <- quaternary_summary_XY_ele %>% full_join(quaternary_summary_XY_ele_confint, by="est") %>% unique()
quaternary_summary_X_ele <-
quaternary_summary %>%
filter(card_type=="X", guess_type=="Z")
quaternary_summary_X_ele_confint <-
quaternary_summary_X_ele$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_X_ele <- quaternary_summary_X_ele %>% full_join(quaternary_summary_X_ele_confint, by="est") %>% unique()
quaternary_summary_XY_and <-
quaternary_summary %>%
filter(card_type=="XY", guess_type=="XandY")
quaternary_summary_XY_and_confint <-
quaternary_summary_XY_and$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_XY_and <- quaternary_summary_XY_and %>% full_join(quaternary_summary_XY_and_confint, by="est") %>% unique()
quaternary_summary_X_and <-
quaternary_summary %>%
filter(card_type=="X", guess_type=="XandY")
quaternary_summary_X_and_confint <-
quaternary_summary_X_and$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_X_and <- quaternary_summary_X_and %>% full_join(quaternary_summary_X_and_confint, by="est") %>% unique()
quaternary_summary_XY_or <-
quaternary_summary %>%
filter(card_type=="XY", guess_type=="XorY")
quaternary_summary_XY_or_confint <-
quaternary_summary_XY_or$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_XY_or <- quaternary_summary_XY_or %>% full_join(quaternary_summary_XY_or_confint, by="est") %>% unique()
quaternary_summary_X_or <-
quaternary_summary %>%
filter(card_type=="X", guess_type=="XorY")
quaternary_summary_X_or_confint <-
quaternary_summary_X_or$count %>%
MultinomCI(conf.level = 0.95, method = "sisonglaz") %>% data.frame()
quaternary_summary_X_or <- quaternary_summary_X_or %>% full_join(quaternary_summary_X_or_confint, by="est") %>% unique()
quaternary_summary <- bind_rows(quaternary_summary_X_cat, quaternary_summary_XY_cat, quaternary_summary_XY_ele, quaternary_summary_X_ele, quaternary_summary_XY_and, quaternary_summary_X_and, quaternary_summary_XY_or, quaternary_summary_X_or)
quaternary_summary$response <- factor(quaternary_summary$response, levels = c("Wrong","Kinda Wrong", "Kinda Right", "Right"))
quaternary_summary$guess_type <- factor(quaternary_summary$guess_type, levels = c("Z","X","XandY","XorY"))
quaternary_summary <- quaternary_summary %>% rename(proportion = "est")
quaternary_predictions <- quaternary_inference$reformat %>%
select(card_guess,prediction_type,prediction) %>%
separate(card_guess, c("card_type","guess_type"), sep = "_")
quaternary_predictions$prediction_type <- recode(quaternary_predictions$prediction_type, right = "Right", wrong = "Wrong", kindaright = "Kinda Right", kindawrong = "Kinda Wrong")
colnames(quaternary_predictions)[colnames(quaternary_predictions)=="prediction_type"] <- "response"
quaternary_summary_m= merge(quaternary_summary, quaternary_predictions, by = c("card_type","guess_type","response")) %>%
gather("source", "proportion", c("proportion","prediction"))
quaternary_summary_m$lwr.ci[quaternary_summary_m$source == 'prediction'] <- NA
quaternary_summary_m$upr.ci[quaternary_summary_m$source == 'prediction'] <- NA
quaternary_summary_m$guess_type <- recode(quaternary_summary_m$guess_type, Z = "elephant", X = "cat", XandY = "cat and dog", XorY ="cat or dog")
quaternary_summary_m = quaternary_summary_m %>%
mutate(condition = case_when(
card_type == "XY" & guess_type %in% c("cat", "cat or dog") ~ "underinformative",
card_type == "X" & guess_type %in% c("cat", "cat or dog") ~ "true",
card_type == "XY" & guess_type == "cat and dog" ~ "true",
TRUE ~ "false"
))
quaternary_plot<-
quaternary_summary_m %>%
ggplot(aes(x=response, y=proportion, fill=condition, alpha=source)) +
geom_bar(stat = "identity", position="dodge",width=0.6,color="gray60") +
facet_grid(card_type~guess_type) +
labs(x=NULL, y="Proportion of response")+
ggtitle(expression(paste("Quaternary condition (Adj. ", R^2, "= 0.931)"))) +
theme_few() +
theme(text = element_text(size=12)) +
# scale_fill_manual(values = c("blue4"), guide=FALSE) +
geom_linerange(aes(ymin=lwr.ci,ymax=upr.ci),position=position_dodge(width = 0.6)) +
guides(fill=FALSE) +
scale_alpha_discrete(name = "Source", labels = c("Prediction", "Observation"), range = c(0.3, 1)) +
theme(legend.position = "null") + theme(axis.text.x = element_text(angle=90, hjust = 1),
strip.text.y = element_blank())
quaternary_plot_g <- ggplot_gtable(ggplot_build(quaternary_plot))
strips <- grep("strip-r", quaternary_plot_g$layout$name)
new_grobs <- list(cat, cat_dog)
quaternary_plot_g <- with(quaternary_plot_g$layout[strips,],
gtable_add_grob(quaternary_plot_g, new_grobs,
t=t, l=l, b=b, r=r, name="cards"))
quaternary_plot_g$widths[[12]] <- unit(2.5,"cm")
grid.draw(quaternary_plot_g)
quinary_summary<-
d %>%
filter(response_type=="quinary") %>%
group_by(card_type, guess_type, response) %>%
summarize(count=n()) %>%
group_by(card_type, guess_type) %>%
mutate(total = sum(count), est=count/total)
ggsave("quaternary_plot.png", width = 5.85, height = 4.19, units = "in", plot = grid.draw(quaternary_plot_g), dpi=1000)
